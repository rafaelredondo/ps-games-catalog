import axios from 'axios';

// Configura칞칚o baseada no ambiente
const baseURL = import.meta.env.DEV 
  ? 'http://localhost:3000/api'  // Desenvolvimento
  : 'https://gamescatalog.net/api'; // Produ칞칚o

const api = axios.create({
  baseURL,
  timeout: 10000 // 10 segundos timeout
});

// Interceptor para tratar erros globalmente
api.interceptors.response.use(
  response => response,
  error => {
    // Tratar erros de autentica칞칚o (401)
    if (error.response?.status === 401) {
      console.warn('游댏 Erro de autentica칞칚o detectado');
      
      // Verificar se havia credenciais (usu치rio estava logado)
      const hadCredentials = localStorage.getItem('ps-games-auth');
      
      // Limpar credenciais do localStorage
      localStorage.removeItem('ps-games-auth');
      
      // Remover header de autoriza칞칚o
      delete api.defaults.headers.common['Authorization'];
      
      // S칩 fazer reload se o usu치rio estava logado (evita loop para usu치rios deslogados)
      if (hadCredentials) {
        console.warn('游댃 Usu치rio estava logado - recarregando p치gina para for칞ar login');
        // Usamos setTimeout para evitar loops infinitos
        setTimeout(() => {
          window.location.reload();
        }, 100);
        
        return Promise.reject(new Error('Sess칚o expirada. Fa칞a login novamente.'));
      } else {
        console.warn('游녻 Usu치rio n칚o estava logado - deixando AuthContext lidar');
        return Promise.reject(new Error('Autentica칞칚o necess치ria.'));
      }
    }
    
    // Tratar erros espec칤ficos de conex칚o
    if (error.code === 'ECONNREFUSED' || error.message.includes('Network Error')) {
      console.error('Erro de conex칚o com o servidor:', error);
      error.message = 'N칚o foi poss칤vel conectar com o servidor. Verifique se o backend est치 rodando.';
    }
    
    // Evitar erros "Receiving end does not exist" de extens칫es
    if (error.message && error.message.includes('Receiving end does not exist')) {
      console.warn('Erro de extens칚o do navegador detectado e ignorado:', error);
      return Promise.resolve({ data: null, status: 200 });
    }
    
    return Promise.reject(error);
  }
);

export default api; 