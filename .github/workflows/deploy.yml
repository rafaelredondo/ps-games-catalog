name: 🚀 Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Permite trigger manual

# Cancela deploys anteriores quando um novo é iniciado
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: 🎯 Deploy Application
    runs-on: ubuntu-latest
    
    steps:
    - name: 📋 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Necessário para git diff
    
    - name: 🔐 Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
    
    - name: 📊 Check what changed  
      id: changes
      run: |
        echo "🔍 Analisando mudanças entre commits..."
        
        # Usar a mesma lógica corrigida do deploy-ci.sh
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # Deploy manual - forçar rebuild de tudo
          echo "🔥 Deploy manual: forçando rebuild completo"
          echo "backend=true" >> $GITHUB_OUTPUT
          echo "frontend=true" >> $GITHUB_OUTPUT
        else
          # Deploy automático - verificar mudanças reais
          PREV_COMMIT=$(git rev-parse HEAD~1)
          CURRENT_COMMIT=$(git rev-parse HEAD)
          
          echo "📊 Comparando: $PREV_COMMIT -> $CURRENT_COMMIT"
          
          if git diff $PREV_COMMIT..$CURRENT_COMMIT --name-only | grep -q "^backend/"; then
            echo "✅ Mudanças detectadas no backend"
            echo "backend=true" >> $GITHUB_OUTPUT
          else
            echo "⏭️  Nenhuma mudança no backend"
            echo "backend=false" >> $GITHUB_OUTPUT
          fi
          
          if git diff $PREV_COMMIT..$CURRENT_COMMIT --name-only | grep -q "^frontend/"; then
            echo "✅ Mudanças detectadas no frontend"
            echo "frontend=true" >> $GITHUB_OUTPUT
          else
            echo "⏭️  Nenhuma mudança no frontend"  
            echo "frontend=false" >> $GITHUB_OUTPUT
          fi
        fi
    
    - name: 📋 Deploy Plan
      run: |
        echo "🎯 PLANO DE DEPLOY"
        echo "=================="
        echo "📊 Trigger: ${{ github.event_name }}"
        echo "📝 Commit: ${{ github.sha }}"
        echo "👤 Autor: ${{ github.actor }}"
        echo "🔄 Mudanças detectadas:"
        echo "   - Backend: ${{ steps.changes.outputs.backend }}"
        echo "   - Frontend: ${{ steps.changes.outputs.frontend }}"
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "🔥 MODO: Deploy forçado (manual)"
          echo "   → Vai rebuildar frontend e backend independente de mudanças"
        else
          echo "🎯 MODO: Deploy inteligente (automático)"
          echo "   → Só atualiza componentes que mudaram"
        fi
    
    - name: 🚀 Deploy to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
      run: |
        echo "🚀 Executando deploy no servidor..."
        
        # Executar deploy no servidor
        DEPLOY_CMD="cd /home/ec2-user/ps-games-catalog && git fetch origin main && chmod +x deployment/*.sh"
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "🔥 Executando deploy forçado (manual trigger)..."
          DEPLOY_CMD="$DEPLOY_CMD && ./deployment/deploy-ci.sh --force"
        else
          echo "🎯 Executando deploy inteligente (push automático)..."
          DEPLOY_CMD="$DEPLOY_CMD && ./deployment/deploy-ci.sh"
        fi
        
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          $EC2_USER@$EC2_HOST \
          "bash -c \"$DEPLOY_CMD\""
    
    - name: 🏥 Health Check
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
      run: |
        echo "🏥 Verificando saúde da aplicação..."
        
        # Aguardar serviços inicializarem
        sleep 15
        
        # Tentativas com retry
        for i in {1..3}; do
          echo "🔄 Tentativa $i/3..."
          if curl -s -f --connect-timeout 10 --max-time 30 https://gamescatalog.net > /dev/null; then
            echo "✅ Aplicação está respondendo!"
            exit 0
          else
            echo "⏳ Aguardando 10s antes da próxima tentativa..."
            sleep 10
          fi
        done
        
        echo "❌ Aplicação não está respondendo após 3 tentativas"
        exit 1
    
    - name: 📱 Notify Success
      if: success()
      run: |
        echo "🎉 DEPLOY REALIZADO COM SUCESSO!"
        echo "================================="
        echo "🌐 Aplicação: https://gamescatalog.net"
        echo "📊 Commit: ${{ github.sha }}"
        echo "👤 Autor: ${{ github.actor }}"
        echo "🔄 Componentes atualizados:"
        echo "   - Backend: ${{ steps.changes.outputs.backend }}"
        echo "   - Frontend: ${{ steps.changes.outputs.frontend }}"
        echo ""
        echo "✅ Pipeline de deploy está 100% confiável!"
        echo "✅ Detecção de mudanças corrigida"
        echo "✅ Deploy forçado disponível via workflow_dispatch"
    
    - name: 📱 Notify Failure
      if: failure()
      run: |
        echo "❌ Deploy falhou!"
        echo "📊 Commit: ${{ github.sha }}"
        echo "👤 Autor: ${{ github.actor }}"
        echo "🔍 Verifique os logs acima para detalhes" 